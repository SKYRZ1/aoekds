#!/bin/bash
clear
change() {
yellow="\033[0;33m"
ungu="\033[0;35m"
Red="\033[91;1m"
YELLOW="\033[93;1m"
Xark="\033[0m"
BlueCyan="\033[5;36m"
Cyan="\033[96;1m"
Purple="\033[95;1m"
Green="\033[92;1m"
WhiteBe="\033[5;37m"
GreenBe="\033[5;32m"
YellowBe="\033[5;33m"
BlueBe="\033[5;34m"
# . Liner 
function baris_panjang() {
  echo -e "${BlueCyan} ——————————————————————————————————— ${Xark} "
}

function rerechan_Banner() {
clear
baris_panjang
echo -e "${ungu}             Ric VPN      ${Xark} "
baris_panjang
}

function Credit(){
sleep 1
baris_panjang
echo -e "${ungu}  Terimakasih Telah Menggunakan ${Xark}"
echo -e "${ungu}          Script Credit ${Xark}"
echo -e "${ungu}    Ric VPN Autoscript AIO     ${Xark}"
baris_panjang
exit 1
}

duration=6
frames=("██10%" "█████35%" "█████████65%" "█████████████80%" "█████████████████████90%" "█████████████████████████100%")

# Menghitung jumlah frame
num_frames=${#frames[@]}

# Menghitung jumlah iterasi
num_iterations=$((duration))

# Fungsi untuk menampilkan animasi loading berwarna

Loading_Animasi() {
    for ((i = 0; i < num_iterations; i++)); do
        clear
        index=$((i % num_frames))
        color_code=$((31 + i % 7))
echo ""
echo ""
echo ""
echo -e "\e[1;${color_code}m ${frames[$index]}\e[0m"
sleep 0.5
    done
}

# Menjalankan animasi loading

# Menampilkan pesan setelah animasi selesai
function Loading_Succes() {
clear
echo -e  "\033[5;32mSucces\033[0m"
sleep 1
clear
}
clear
echo -e "\033[5;36m┌──────────────────────────────────────────┐\033[0m"
echo "   USERNAME       EXP DATE         STATUS"
echo -e "\033[5;36m└──────────────────────────────────────────┘\033[0m"
echo -e "\033[5;36m┌──────────────────────────────────────────┐\033[0m"
while read expired
do
AKUN="$(echo $expired | cut -d: -f1)"
ID="$(echo $expired | grep -v nobody | cut -d: -f3)"
exp="$(chage -l $AKUN | grep "Account expires" | awk -F": " '{print $2}')"
status="$(passwd -S $AKUN | awk '{print $2}' )"
if [[ $ID -ge 1000 ]]; then
if [[ "$status" = "L" ]]; then
 printf "%-17s %2s %-17s %2s \n" "  $AKUN" "$exp   " "LOCKED${NORMAL}"
else
 printf "%-17s %2s %-17s %2s \n" "  $AKUN" "$exp   " "UNLOCKED${NORMAL}"
fi
fi
done < /etc/passwd
JUMLAH="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
echo -e "\033[5;36m└──────────────────────────────────────────┘\033[0m"
echo -e "\033[5;36m┌──────────────────────────────────────────┐\033[0m"
echo "   Account number: $JUMLAH   user"
echo -e "\033[5;36m└──────────────────────────────────────────┘\033[0m"
echo -e ""
read -p "input username: " user
limit_file="/etc/funny/limit/ssh/ip/$user"

# Validasi apakah file batasan IP sudah ada
if [ -e "$limit_file" ]; then
  current_iplimit=$(cat "$limit_file")
  Lunatic_Banner
  baris_panjang
  echo -e "${Cyan} Before ${Xark} "
  echo -e ""
  echo -e "${yellow} Username   : $user ${Xark} "
  echo -e "${yellow} Ip Limit   : $current_iplimit ${Xark}"
  echo -e ""
  baris_panjang
  echo -e ""
  read -p "Input New Ip   : " new_iplimit

Loading_Animasi
Loading_Succes


  # Validasi jika masukan kosong
  if [ -z "$new_iplimit" ]; then
    echo -e "${White} Invallid !! "
  else
    echo "$new_iplimit" > "$limit_file"
    Lunatic_Banner
    baris_panjang
    echo -e "${GreenBe} Succesfully ${Xark} "
    echo -e ""
    echo -e "${Cyan} After  ${Xark} "
    echo -e ""
    echo -e "${yellow} New Ip   : $new_iplimit ${Xark} "
    echo -e "${yellow} Username : $user ${Xark} "
    echo -e ""
    baris_panjang
    Credit

  fi
else

rerechan_Banner
baris_panjang
  echo -e "${Red} Sorry ${Xark} "
echo ""
  echo -e "${YELLOW} Username   : $user "
  echo -e "${YELLOW} IP LIMIT   : invallid !! ${Xark} "
echo ""
baris_panjang
Credit

fi
}
addssh() {
clear
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHT='\033[0;37m'
#INPUT SSH
domain=$(cat /etc/xray/domain)
clear
echo -e "\e[33m===================================\033[0m"
echo -e "\E[40;1;37m            SSH Account            \E[0m"
echo -e "\e[33m===================================\033[0m"
read -p "Username       : " Login
read -p "Password       : " Pass
read -p "Max IP         : " iplimit
read -p "Expired (Days) : " masaaktif
clear
#limitip
if [[ $iplimit -gt 0 ]]; then
echo -e "$iplimit" > /etc/funny/limit/ssh/ip/$Login
else
echo > /dev/null
fi
clear
systemctl restart dropbear
useradd -e `date -d "$masaaktif days" +"%Y-%m-%d"` -s /bin/false -M $Login
expi="$(chage -l $Login | grep "Account expires" | awk -F": " '{print $2}')"
echo -e "$Pass\n$Pass\n"|passwd $Login &> /dev/null
hariini=`date -d "0 days" +"%Y-%m-%d"`
expi=`date -d "$masaaktif days" +"%Y-%m-%d"`
echo "$Login:$Pass" | sudo chpasswd
domain=$(cat /etc/xray/domain)
isp=$(cat /root/.myisp)
city=$(cat /root/.mycity)
region=$(cat /root/.region)
clear
TEKS="
===============================
 [ <= SSH && OVPN ACCOUNT => ]
===============================

Host/IP : $domain
Wildcard: bug.com.${domain}
Username: $Login
Password: $Pass
Expired : $expi
Limit   : ${iplimit} Device
===============================
  Service & Port SSH Account

Dropbear   : 109  | 111
openSSH    : 22   | 3303
HTTP Proxy : 8888 | 3128
HTTPS WS   : 443  | 2095 | 53
HTTP  WS   : 80   | 2082
UDP CUSTOM :   1-65535
UDP Request:   1-65535
BadVPN     :    7300
===============================
Payload    : GET / HTTP/1.1[crlf]Host: [host_port][crlf]Upgrade: websocket[crlf]X-Online-Host: [host][crlf]X-Forward-Host: [host][crlf][crlf]
===============================
"
CHATID=$(cat /etc/funny/.chatid)
KEY=$(cat /etc/funny/.keybot)
TIME="10"
URL="https://api.telegram.org/bot$KEY/sendMessage"
curl -s --max-time $TIME -d "chat_id=$CHATID&text=$TEKS" $URL
clear
clear
echo -e " $TEKS "
}

member() {
#=========================================================================================================================
clear
echo -e "\e[33m==========================================\033[0m"
echo -e "\E[40;1;37m                 MEMBER SSH               \E[0m"
echo -e "\e[33m==========================================\033[0m"
echo "USERNAME          EXP DATE          STATUS"
echo -e "\e[33m==========================================\033[0m"
while read expired
do
AKUN="$(echo $expired | cut -d: -f1)"
ID="$(echo $expired | grep -v nobody | cut -d: -f3)"
exp="$(chage -l $AKUN | grep "Account expires" | awk -F": " '{print $2}')"
status="$(passwd -S $AKUN | awk '{print $2}' )"
if [[ $ID -ge 1000 ]]; then
if [[ "$status" = "L" ]]; then
printf "%-17s %2s %-17s %2s \n" "$AKUN" "$exp     " "${RED}LOCKED${NORMAL}"
else
printf "%-17s %2s %-17s %2s \n" "$AKUN" "$exp     " "${GREEN}UNLOCKED${NORMAL}"
fi
fi
done < /etc/passwd
JUMLAH="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
echo -e "\e[33m==========================================\033[0m"
echo "Account number: $JUMLAH user"
echo -e "\e[33m==========================================\033[0m"
read -n 1 -s -r -p "Press any key to back on menu"
menu
}

hapus() {
clear
#=========================================================================================================================
#########################
clear
echo -e "\033[0;34m==========================================\033[0m"
echo -e "\E[0;41;36m                 AKUN SSH               \E[0m"
echo -e "\033[0;34m==========================================\033[0m"
echo "USERNAME          EXP DATE          STATUS"
echo -e "\033[0;34m==========================================\033[0m"
while read expired
do
AKUN="$(echo $expired | cut -d: -f1)"
ID="$(echo $expired | grep -v nobody | cut -d: -f3)"
exp="$(chage -l $AKUN | grep "Account expires" | awk -F": " '{print $2}')"
status="$(passwd -S $AKUN | awk '{print $2}' )"
if [[ $ID -ge 1000 ]]; then
if [[ "$status" = "L" ]]; then
printf "%-17s %2s %-17s %2s \n" "$AKUN" "$exp     " "${RED}LOCKED${NORMAL}"
else
printf "%-17s %2s %-17s %2s \n" "$AKUN" "$exp     " "${GREEN}UNLOCKED${NORMAL}"
fi
fi
done < /etc/passwd
JUMLAH="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
echo -e "\033[0;34m==========================================\033[0m"
echo "Account number: $JUMLAH user"
echo -e "\033[0;34m==========================================\033[0m"
echo ""
read -p "Username SSH to Delete : " Pengguna
rm -fr /etc/funny/limit/ip/$Pengguna
if getent passwd $Pengguna > /dev/null 2>&1; then
        userdel $Pengguna > /dev/null 2>&1
        rm -fr /etc/funny/limit/ssh/ip/$Pengguna
        clear
        echo -e "User $Pengguna was removed."
        systemctl restart nginx
systemctl restart dropbear
else
clear
        echo -e "Failure: User $Pengguna Not Exist."
fi

read -n 1 -s -r -p "Press any key to back on menu"
menu
}

renew() {
dateFromServer=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
biji=`date +"%Y-%m-%d" -d "$dateFromServer"`
#########################
clear
echo -e "\e[33m==========================================\033[0m"
echo -e "\E[40;1;37m               RENEW  USER                \E[0m"
echo -e "\e[33m==========================================\033[0m"
echo
read -p "Username : " User
egrep "^$User" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
read -p "Day Extend : " Days
Today=`date +%s`
Days_Detailed=$(( $Days * 86400 ))
Expire_On=$(($Today + $Days_Detailed))
Expiration=$(date -u --date="1970-01-01 $Expire_On sec GMT" +%Y/%m/%d)
Expiration_Display=$(date -u --date="1970-01-01 $Expire_On sec GMT" '+%d %b %Y')
passwd -u $User
usermod -e  $Expiration $User
egrep "^$User" /etc/passwd >/dev/null
echo -e "$Pass\n$Pass\n"|passwd $User &> /dev/null
clear
echo -e "\e[33m==========================================\033[0m"
echo -e "\E[40;1;37m               RENEW  USER                \E[0m"
echo -e "\e[33m==========================================\033[0m"
echo -e ""
echo -e " Username : $User"
echo -e " Days Added : $Days Days"
echo -e " Expires on :  $Expiration_Display"
echo -e ""
echo -e "\e[33m==========================================\033[0m"
else
clear
echo -e "\e[33m==========================================\033[0m"
echo -e "\E[40;1;37m               RENEW  USER                \E[0m"
echo -e "\e[33m==========================================\033[0m"
echo -e ""
echo -e "   Username Doesnt Exist      "
echo -e ""
echo -e "\e[33m==========================================\033[0m"
fi
read -n 1 -s -r -p "Press any key to back on menu"
menu
}

pwssh() {
red='\033[0;31m'
NC='\033[0m'
blue='\033[0;34m'
#INPUT SSH
clear
echo " "
echo " "
echo " "
clear
echo -e "\e[33m===============================================\033[0m"
echo -e "\E[40;1;37m          CHANGE PASS  SSH Account            \E[0m"
echo -e "\e[33m===============================================\033[0m"
read -p "Input username to change password: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
read -p "Input new password for user $username: " password

clear
echo "Connecting to Server..."
sleep 0.5
echo "Generating New Password..."
sleep 0.5
  egrep "^$username" /etc/passwd >/dev/null
  echo -e "$password\n$password" | passwd $username
  clear
  echo " "
  echo " "
  echo " "
  clear
  echo -e "\e[33m===============================================\033[0m"
  echo -e "Password for user ${blue}$username${NC} successfully changed."
  echo -e "The new Password for user ${blue}$username${NC} is ${red}$password${NC}"
  echo -e "\e[33m===============================================\033[0m"
  echo " "
  echo " "
  echo " "

else
echo " "
clear
echo -e "\e[33m===============================================\033[0m"
echo -e "Username ${red}$username${NC} not found in your VPS"
echo -e "\e[33m===============================================\033[0m"
echo " "
exit 0
fi
}

mesinssh() {
# Color
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHT='\033[0;37m'
# ==========================================
# Getting
clear
echo " "
echo " "

if [ -e "/var/log/auth.log" ]; then
        LOG="/var/log/auth.log";
fi
if [ -e "/var/log/secure" ]; then
        LOG="/var/log/secure";
fi

data=( `ps aux | grep -i dropbear | awk '{print $2}'`);
echo "----------=[ Dropbear User Login ]=-----------";
echo "ID  |  Username  |  IP Address";
echo "----------------------------------------------";
cat $LOG | grep -i dropbear | grep -i "Password auth succeeded" > /tmp/login-db.txt;
for PID in "${data[@]}"
do
        cat /tmp/login-db.txt | grep "dropbear\[$PID\]" > /tmp/login-db-pid.txt;
        NUM=`cat /tmp/login-db-pid.txt | wc -l`;
        USER=`cat /tmp/login-db-pid.txt | awk '{print $10}'`;
        IP=`cat /tmp/login-db-pid.txt | awk '{print $12}'`;
        if [ $NUM -eq 1 ]; then
                echo "$PID - $USER - $IP";
                fi
done
echo " "
echo "----------=[ OpenSSH User Login ]=------------";
echo "ID  |  Username  |  IP Address";
echo "----------------------------------------------";
cat $LOG | grep -i sshd | grep -i "Accepted password for" > /tmp/login-db.txt
data=( `ps aux | grep "\[priv\]" | sort -k 72 | awk '{print $2}'`);

for PID in "${data[@]}"
do
        cat /tmp/login-db.txt | grep "sshd\[$PID\]" > /tmp/login-db-pid.txt;
        NUM=`cat /tmp/login-db-pid.txt | wc -l`;
        USER=`cat /tmp/login-db-pid.txt | awk '{print $9}'`;
        IP=`cat /tmp/login-db-pid.txt | awk '{print $11}'`;
        if [ $NUM -eq 1 ]; then
                echo "$PID - $USER - $IP";
        fi
done
if [ -f "/etc/openvpn/server/openvpn-tcp.log" ]; then
echo ""
echo "---------=[ OpenVPN TCP User Login ]=---------";
echo "Username  |  IP Address  |  Connected";
echo "----------------------------------------------";
        cat /etc/openvpn/server/openvpn-tcp.log | grep -w "^CLIENT_LIST" | cut -d ',' -f 2,3,8 | sed -e 's/,/      /g' > /tmp/vpn-login-tcp.txt
        cat /tmp/vpn-login-tcp.txt
fi
echo "----------------------------------------------";

if [ -f "/etc/openvpn/server/openvpn-udp.log" ]; then
echo " "
echo "---------=[ OpenVPN UDP User Login ]=---------";
echo "Username  |  IP Address  |  Connected";
echo "----------------------------------------------";
        cat /etc/openvpn/server/openvpn-udp.log | grep -w "^CLIENT_LIST" | cut -d ',' -f 2,3,8 | sed -e 's/,/      /g' > /tmp/vpn-login-udp.txt
        cat /tmp/vpn-login-udp.txt
fi
echo "----------------------------------------------";
echo "";
}

cek() {
clear
#=========================================================================================================================
clear
touch /root/.system
clear
echo -e "\033[0;34m===================================\033[0m"
echo -e "     =[ SSH User Login ]=         "
echo -e "\033[0;34m===================================\033[0m"
mulog=$(mesinssh)
data=( `cat /etc/passwd | grep home | cut -d ' ' -f 1 | cut -d : -f 1`);
for user in "${data[@]}"
do
kelazz=$(cat /etc/funny/limit/ssh/ip/$user)
cekcek=$(echo -e "$mulog" | grep $user | wc -l)
if [[ $cekcek -gt 0 ]]; then
echo -e "\e[33;1mUser\e[32;1m  : $user"
echo -e "\e[33;1mLogin\e[32;1m : $cekcek / $kelazz IP Login "
echo -e "\033[0;34m===================================\033[0m"
echo "slot" >> /root/.system
else
echo > /dev/null
fi
sleep 0.1
done
aktif=$(cat /root/.system | wc -l)
echo -e "$aktif User Online"
echo -e "\033[0;34m===================================\033[0m"
sed -i "d" /root/.system
read -n 1 -s -r -p "Press any key to back on menu"
menu
}

run_cek() {
figlet RicOnly | lolcat
echo -e " Mohon Tunggu 2 Detik "
sleep 2
clear
}

run_menu() {
run_cek
echo -e "
===============================
[ <= PANEL SSH ACCOUNT VPN => ]
===============================

1. Create SSH Account
2. List Member SSH Account
3. Delete SSH Account in Server
4. Renew SSH Account in Server
5. Change Password SSH Account
6. Cek User Login IP SSH Account
7. Change Limit IP For SSH Account
===============================
Preess CTRL or X to exit
================================"
echo -e ""
read -p " Select menu :  "  opt
echo -e ""
case $opt in
1) clear ; addssh ;;
2) clear ; member ;;
3) clear ; hapus ;;
4) clear ; renew ;;
5) clear ; pwssh ;;
6) clear ; cek ;;
7) clear ; change ;;
x) exit ; menu ;;
*) clear ; run_menu ;;
esac
}

run_menu
