#!/bin/bash
white='\e[037;1m'
clear
izin() {
clear
clear
}

webm() {
# ==========================================
clear
Green_font_prefix="\033[32m" && Red_font_prefix="\033[31m" && Green_background_prefix="\033[42;37m" && Red_background_prefix="\033[41;37m" && Font_color_suffix="\033[0m"
Info="${Green_font_prefix}[Installed]${Font_color_suffix}"
Error="${Red_font_prefix}[Not Installed]${Font_color_suffix}"
cek=$(netstat -ntlp | grep 10000 | awk '{print $7}' | cut -d'/' -f2)
function install () {
IP=$(curl ifconfig.me);
echo " Adding Repositori Webmin"
sh -c 'echo "deb http://download.webmin.com/download/repository sarge contrib" > /etc/apt/sources.list.d/webmin.list'
apt install gnupg gnupg1 gnupg2 -y
wget http://www.webmin.com/jcameron-key.asc
apt-key add jcameron-key.asc
echo " Start Install Webmin"
clear
sleep 0.5
apt update > /dev/null 2>&1
apt install webmin -y
sed -i 's/ssl=1/ssl=0/g' /etc/webmin/miniserv.conf
/etc/init.d/webmin restart
rm -f /root/jcameron-key.asc
clear
echo ""
echo "======================="
echo "  Done Install Webmin  "
echo "======================="
echo "http://$(cat /etc/xray/domain):10000"
echo "======================="
echo "Script By RicOnly"
read -n 1 -s -r -p "Press any key to back on menu"
menu
}
function restart () {
echo " Restarting Webmin"
sleep 0.5
service webmin restart > /dev/null 2>&1
echo " Start Uninstall Webmin"
clear
echo ""
echo "======================="
echo "  Done Restart Webmin  "
echo "======================="
echo "Script By RicOnly"
read -n 1 -s -r -p "Press any key to back on menu"
menu
}
function uninstall () {
echo " Removing Repositori Webmin"
rm -f /etc/apt/sources.list.d/webmin.list
apt update > /dev/null 2>&1
echo " Start Uninstall Webmin"
clear
sleep 0.5
apt autoremove --purge webmin -y > /dev/null 2>&1
clear
echo ""
echo "========================="
echo "  Done Uninstall Webmin  "
echo "========================="
echo "Script By RicOnly"
read -n 1 -s -r -p "Press any key to back on menu"
menu
}
if [[ "$cek" = "perl" ]]; then
sts="${Info}"
else
sts="${Error}"
fi
clear
echo -e ""
echo -e "================================"
echo -e "   Webmin Menu $sts        "
echo -e "================================"
echo -e "1.Install Webmin"
echo -e "2.Restart Webmin"
echo -e "3.Uninstall Webmin"
echo -e "================================"
read -rp "Please Enter The Correct Number : " -e num
if [[ "$num" = "1" ]]; then
install
elif [[ "$num" = "2" ]]; then
restart
elif [[ "$num" = "3" ]]; then
uninstall
else
clear
echo " You Entered The Wrong Number"
menu
fi
}

update-sc() {
    clear
    wget https://raw.githubusercontent.com/SKYRZ1/aoekds/main/install.sh && chmod +x install.sh && ./install.sh
}

dm-menu() {
red='\e[1;31m'
green='\e[0;32m'
blue='\e[0;34m'
cyan='\e[0;36m'
cyanb='\e[46m'
white='\e[037;1m'
grey='\e[1;36m'
NC='\e[0m'


cert() {
clear
echo start
clear
domain=$(cat /etc/xray/domain)
echo -e " Generate new Ceritificate Pleade Input Type Your VPS"
read -p "Install certificate for IPv4 or IPv6? (4/6): " ip_version
if [[ $ip_version == "4" ]]; then
    systemctl stop nginx
    mkdir /root/.acme.sh
    curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256
    ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc
    systemctl start nginx
    echo "Cert installed for IPv4."
elif [[ $ip_version == "6" ]]; then
    systemctl stop nginx
    mkdir /root/.acme.sh
    curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256 --listen-v6
    ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc
    systemctl start nginx
    echo "Cert installed for IPv6."
else
    echo "Invalid IP version. Please choose '4' for IPv4 or '6' for IPv6."
fi
}

add-domain() {
clear
echo -e "\e[33m===================================\033[0m"
echo -e "Domain anda saat ini:"
echo -e "$(cat /etc/xray/domain)"
echo ""
read -rp "Domain/Host: " -e host
echo ""
if [ -z $host ]; then
echo "DONE CHANGE DOMAIN"
echo -e "\e[33m===================================\033[0m"
read -n 1 -s -r -p "Press any key to back on menu"
menu
else
echo "$host" > /etc/xray/domain
echo -e "\e[33m===================================\033[0m"
echo -e ""
read -n 1 -s -r -p "Press any key to renew cert"
cert
fi
}
clear
echo -e "${cyan}============================================================${NC}" | lolcat
echo -e " \E[41;1;37m                  ◎ DOMAIN  MENU ◎                        \E[0m"
echo -e "${cyan}============================================================${NC}" | lolcat
echo -e  "  "
echo -e "${white} [ 1 ] •${white} CHANGE SUBDOMAIN VPN"
echo -e "${white} [ 2 ] •${white} RENEW CERTIFICATE DOMAIN"
echo -e  "  "

echo -e  "    ${green}PRESS [ X ] TO EXIT MENU${NC} "
echo -e
echo -e "${cyan}============================================================${NC}" | lolcat
echo -e " \E[41;1;37m          ◎ Modded By RetriVPN Own RicOnly ◎              \E[0m"
echo -e "${cyan}============================================================${NC}" | lolcat
echo ""
read -p  " PLEASE SELECT AN OPTION : " Setbackuptime
echo -e "\e[0m"
case $Setbackuptime in
        1)
        clear
        add-domain
        ;;
        2)
        clear
        cert
        ;;
        x)
    exit
    menu
    ;;
        *)
        echo -e "Please enter an correct number"
        sleep 1
        clear
        dm-menu
        ;;
        esac
}


reres() {
clear
                sleep 1
                systemctl daemon-reload
                systemctl stop systemd-resolved
                /etc/init.d/ssh restart
                /etc/init.d/dropbear restart
                /etc/init.d/cron restart
                /etc/init.d/nginx restart
                systemctl start systemd-resolved
                clear
                echo -e "[ \033[32mInfo\033[0m ] Restart Begin"
                sleep 1
                echo -e "[ \033[32mok\033[0m ] Restarting xray Service (via systemctl) "
                sleep 0.5
                systemctl restart xray
                systemctl restart xray.service
                echo -e "[ \033[32mok\033[0m ] Restarting badvpn Service (via systemctl) "
                sleep 0.5
                systemctl restart badvpn
                sleep 0.5
                echo -e "[ \033[32mok\033[0m ] Restarting websocket Service (via systemctl) "
                sleep 0.5
                systemctl restart edu.service
                sleep 0.5
                echo -e "[ \033[32mInfo\033[0m ] ALL Service Restarted"
                echo ""
                echo -e "\e[33m===================================\033[0m"
                echo ""
}

netf() {
#Script Updater By Rerechan02
Font_Black="\033[30m";
Font_Red="\033[31m";
Font_Green="\033[32m";
Font_Yellow="\033[33m";
Font_Blue="\033[34m";
Font_Purple="\033[35m";
Font_SkyBlue="\033[36m";
Font_White="\033[37m";
Font_Suffix="\033[0m";


clear;
echo -e "  \033[1;37m${Font_Purple}Media Stream Unlocker Test Mod By Rerechan02${Font_Suffix}\033[0m";
echo -e "  \033[1;37mVersion : ${Font_SkyBlue}1.0${Font_Suffix}\033[0m";
echo -e "  \033[1;37mTime    : $(date)\033[0m"

export LANG="en_US.UTF-8";
export LANGUAGE="en_US.UTF-8";
export LC_ALL="en_US.UTF-8";

function InstallJQ() {
    if [ -e "/etc/redhat-release" ];then
        echo -e "${Font_Green}Installing dependencies: epel-release${Font_Suffix}";
        yum install epel-release -y -q > /dev/null;
        echo -e "${Font_Green}Installing dependencies: jq${Font_Suffix}";
        yum install jq -y -q > /dev/null;
    elif [[ $(cat /etc/os-release | grep '^ID=') =~ ubuntu ]] || [[ $(cat /etc/os-release | grep '^ID=') =~ debian ]];then
        echo -e "${Font_Green}Updating package list...${Font_Suffix}";
        apt-get update -y > /dev/null;
        echo -e "${Font_Green}Installing dependencies: jq${Font_Suffix}";
        apt-get install jq -y > /dev/null;
    else
        echo -e "${Font_Red}Please install jq manually${Font_Suffix}";
        exit;
    fi
}

function InstallCurl() {
    if [ -e "/etc/redhat-release" ];then
        echo -e "${Font_Green}Installing dependencies: curl${Font_Suffix}";
        yum install curl -y > /dev/null;
    elif [[ $(cat /etc/os-release | grep '^ID=') =~ ubuntu ]] || [[ $(cat /etc/os-release | grep '^ID=') =~ debian ]];then
        echo -e "${Font_Green}Updating package list...${Font_Suffix}";
        apt-get update -y > /dev/null;
        echo -e "${Font_Green}Installing dependencies: curl${Font_Suffix}";
        apt-get install curl -y > /dev/null;
    else
        echo -e "${Font_Red}请手动安装curl${Font_Suffix}";
        exit;
    fi
}

function PharseJSON() {
    # 使用方法: PharseJSON "要解析的原JSON文本" "要解析的键值"
    # Example: PharseJSON ""Value":"123456"" "Value" [返回结果: 123456]
    echo -n $1 | jq -r .$2;
}

function GameTest_Steam(){
    echo -n -e " Steam\t\t\t\t\t->\c";
    local result=$(curl --user-agent "${UA_Browser}" -${1} -fsSL --max-time 10 https://store.steampowered.com/app/761830 2>&1 | grep priceCurrency | cut -d '"' -f4);
    
    if [ ! -n "$result" ]; then
        echo -n -e "\r Steam\t\t\t\t\t: ${Font_Red}Failed (Network Connection)${Font_Suffix}\n";
    else
        echo -n -e "\r Steam\t\t\t\t\t: ${Font_Green}Yes(Currency: ${result})${Font_Suffix}\n";
    fi
}

function MediaUnlockTest_Netflix() {
    echo -n -e " Netflix\t\t\t\t->\c";
    local result1=$(curl $useNIC $xForward -${1} --user-agent "${UA_Browser}" -fsL --write-out %{http_code} --output /dev/null --max-time 10 "https://www.netflix.com/title/81403959" 2>&1)

    if [[ "$result1" == "404" ]]; then
        echo -n -e "\r Netflix\t\t\t\t: ${Font_Yellow}Originals Only${Font_Suffix}\n"
        return
    elif [[ "$result1" == "403" ]]; then
        echo -n -e "\r Netflix\t\t\t\t: ${Font_Red}No${Font_Suffix}\n"
        return
    elif [[ "$result1" == "200" ]]; then
        local region=$(curl $useNIC $xForward -${1} --user-agent "${UA_Browser}" -fs --max-time 10 --write-out %{redirect_url} --output /dev/null "https://www.netflix.com/title/80018499" | cut -d '/' -f4 | cut -d '-' -f1 | tr [:lower:] [:upper:])
        if [[ ! -n "$region" ]]; then
            region="US"
        fi
        echo -n -e "\r Netflix\t\t\t\t: ${Font_Green}Yes(Region: ${region})${Font_Suffix}\n"
        return
    elif [[ "$result1" == "000" ]]; then
        echo -n -e "\r Netflix\t\t\t\t: ${Font_Red}Failed (Network Connection)${Font_Suffix}\n"
        return
    fi
}

function MediaUnlockTest_HotStar() {
    echo -n -e " HotStar\t\t\t\t->\c"
    local result=$(curl $useNIC $xForward --user-agent "${UA_Browser}" -${1} ${ssll} -fsL --write-out %{http_code} --output /dev/null --max-time 10 "https://api.hotstar.com/o/v1/page/1557?offset=0&size=20&tao=0&tas=20")
    if [ "$result" = "000" ]; then
        echo -n -e "\r HotStar\t\t\t\t: ${Font_Red}Failed (Network Connection)${Font_Suffix}\n"
        return
    elif [ "$result" = "401" ]; then
        local region=$(curl $useNIC $xForward --user-agent "${UA_Browser}" -${1} ${ssll} -sI "https://www.hotstar.com" | grep 'geo=' | sed 's/.*geo=//' | cut -f1 -d",")
        local site_region=$(curl $useNIC $xForward -${1} ${ssll} -s -o /dev/null -L --max-time 10 -w '%{url_effective}\n' "https://www.hotstar.com" | sed 's@.*com/@@' | tr [:lower:] [:upper:])
        if [ -n "$region" ] && [ "$region" = "$site_region" ]; then
            echo -n -e "\r HotStar\t\t\t\t: ${Font_Green}Yes(Region: $region)${Font_Suffix}\n"
            return
        else
            echo -n -e "\r HotStar\t\t\t\t: ${Font_Red}No${Font_Suffix}\n"
            return
        fi
    elif [ "$result" = "475" ]; then
        echo -n -e "\r HotStar\t\t\t\t: ${Font_Red}No${Font_Suffix}\n"
        return
    else
        echo -n -e "\r HotStar\t\t\t\t: ${Font_Red}Failed${Font_Suffix}\n"
    fi

}

function MediaUnlockTest_iQiyi(){
    echo -n -e " iQiyi Global\t\t\t\t->\c";
    local tmpresult=$(curl -${1} -s -I "https://www.iq.com/" 2>&1);
    if [[ "$tmpresult" == "curl"* ]];then
        	echo -n -e "\r iQiyi Global\t\t\t\t: ${Font_Red}Failed (Network Connection)${Font_Suffix}\n"
        	return;
    fi
    
    local result=$(echo "${tmpresult}" | grep 'mod=' | awk '{print $2}' | cut -f2 -d'=' | cut -f1 -d';');
    if [ -n "$result" ]; then
		if [[ "$result" == "ntw" ]]; then
			echo -n -e "\r iQiyi Global\t\t\t\t: ${Font_Green}Yes(Region: TW)${Font_Suffix}\n"
			return;
		else
			result=$(echo ${result} | tr 'a-z' 'A-Z') 
			echo -n -e "\r iQiyi Global\t\t\t\t: ${Font_Green}Yes(Region: ${result})${Font_Suffix}\n"
			return;
		fi	
    else
		echo -n -e "\r iQiyi Global\t\t\t\t: ${Font_Red}Failed${Font_Suffix}\n"
		return;
	fi	
}

function MediaUnlockTest_Viu_com() {
    echo -n -e " Viu.com\t\t\t\t->\c";
    local tmpresult=$(curl -${1} -s -o /dev/null -L --max-time 30 -w '%{url_effective}\n' "https://www.viu.com/" 2>&1);
	if [[ "${tmpresult}" == "curl"* ]];then
        echo -n -e "\r Viu.com\t\t\t\t: ${Font_Red}Failed (Network Connection)${Font_Suffix}\n"
        return;
    fi
	
	local result=$(echo ${tmpresult} | cut -f5 -d"/")
	if [ -n "${result}" ]; then
		if [[ "${result}" == "no-service" ]]; then
			echo -n -e "\r Viu.com\t\t\t\t: ${Font_Red}No${Font_Suffix}\n"
			return;
		else
			result=$(echo ${result} | tr 'a-z' 'A-Z')
			echo -n -e "\r Viu.com\t\t\t\t: ${Font_Green}Yes(Region: ${result})${Font_Suffix}\n"
			return;
		fi
    else
		echo -n -e "\r Viu.com\t\t\t\t: ${Font_Red}Failed${Font_Suffix}\n"
		return;
	fi
}

function MediaUnlockTest_YouTube() {
    echo -n -e " YouTube\t\t\t\t->\c";
    local tmpresult=$(curl -${1} -s -H "Accept-Language: en" "https://www.youtube.com/premium")
    local region=$(curl --user-agent "${UA_Browser}" -${1} -sL "https://www.youtube.com/red" | sed 's/,/\n/g' | grep "countryCode" | cut -d '"' -f4)
	if [ -n "$region" ]; then
        sleep 0
	else
		region=US
	fi	
	
    if [[ "$tmpresult" == "curl"* ]];then
        echo -n -e "\r YouTube\t\t\t\t: ${Font_Red}Failed (Network Connection)${Font_Suffix}\n"
        return;
    fi
    
    local result=$(echo $tmpresult | grep 'Premium is not available in your country')
    if [ -n "$result" ]; then
        echo -n -e "\r YouTube\t\t\t\t: ${Font_Red}No Premium${Font_Suffix}(Region: ${region})${Font_Suffix} \n"
        return;
		
    fi
    local result=$(echo $tmpresult | grep 'YouTube and YouTube Music ad-free')
    if [ -n "$result" ]; then
        echo -n -e "\r YouTube\t\t\t\t: ${Font_Green}Yes(Region: ${region})${Font_Suffix}\n"
        return;
	else
		echo -n -e "\r YouTube\t\t\t\t: ${Font_Red}Failed${Font_Suffix}\n"
		
    fi	
	
    
}

function IPInfo() {
    local result=$(curl -fsSL http://ip-api.com/json/ 2>&1);
	
	echo -e -n " IP\t\t\t\t\t->\c";
    local ip=$(PharseJSON "${result}" "query");
	echo -e -n "\r IP\t\t\t\t\t: ${Font_Green}${ip}${Font_Suffix}\n";
	
	echo -e -n " Country\t\t\t\t->\c";
	local country=$(PharseJSON "${result}" "country");
	echo -e -n "\r Country\t\t\t\t: ${Font_Green}${country}${Font_Suffix}\n";
	
	echo -e -n " Region\t\t\t\t\t->\c";
	local region=$(PharseJSON "${result}" "regionName");
	echo -e -n "\r Region\t\t\t\t\t: ${Font_Green}${region}${Font_Suffix}\n";
	
	echo -e -n " City\t\t\t\t\t->\c";
	local city=$(PharseJSON "${result}" "city");
	echo -e -n "\r City\t\t\t\t\t: ${Font_Green}${city}${Font_Suffix}\n";
	
	echo -e -n " ISP\t\t\t\t\t->\c";
	local isp=$(PharseJSON "${result}" "isp");
	echo -e -n "\r ISP\t\t\t\t\t: ${Font_Green}${isp}${Font_Suffix}\n";
}

function MediaUnlockTest() {
	IPInfo ${1};
	
    global ${1};
}

function global() {
	echo -e "\n \033[1;37m${Font_Purple}-- Global --${Font_Suffix}\033[0m"
	MediaUnlockTest_Netflix ${1};
	MediaUnlockTest_HotStar ${1};
	MediaUnlockTest_YouTube ${1};
	MediaUnlockTest_iQiyi ${1};
	MediaUnlockTest_Viu_com ${1};
	GameTest_Steam ${1};
}

function startcheck() {
    mode=${1}
    mode=$(echo ${mode} | tr 'A-Z' 'a-z')
    if [[ "${mode}" != "" ]]; then
        case $mode in
            'global')
                IPInfo ${2};
                global ${2};
            ;;
            *)
                MediaUnlockTest ${2};
        esac
    else
        MediaUnlockTest ${2};
    fi
}

# install curl
if ! curl -V > /dev/null 2>&1;then
    InstallCurl;
fi

# install jq
if ! jq -V > /dev/null 2>&1;then
    InstallJQ;
fi

echo "";
echo -e " \033[1;37m${Font_Purple}-- IPV4 --${Font_Suffix}\033[0m";
check4=$(ping 1.1.1.1 -c 1 2>&1);
if [[ "$check4" != *"unreachable"* ]] && [[ "$check4" != *"Unreachable"* ]];then
    startcheck "${1}" "4";
else
    v4=""
    echo -e "${Font_SkyBlue}The current host does not support IPV4, skip...${Font_Suffix}";
fi

echo ""
echo -e " \033[1;37m${Font_Purple}-- IPV6 --${Font_Suffix}\033[0m";
check6=$(ping6 240c::6666 -c 1 2>&1);
if [[ "$check6" != *"unreachable"* ]] && [[ "$check6" != *"Unreachable"* ]];then
    v6="1"
else
    v6=""
    echo -e "${Font_SkyBlue}The current host does not support IPV6, skip...${Font_Suffix}";
fi
echo ""
echo -e "${Font_Green}Finished Test${Font_Suffix}"
echo ""
}


tampilan() {
clear
echo -e "${white}
==================================
[ <=    Menu System Server    => ]
==================================
01. Update Script
02. Change Subdomain
03. Change Bot Notif
04. Cek Streaming Checker
05. Menu Webmin CPanel Free
06. Cek Usage CPU / Ram / Disk
07. Speedtest Server Speed In Speedtest.net
==================================
Press CTRL + C or X to exit
==================================
"
read -p "Input Option: " opt
case $opt in
             01|1)
                  update-sc
                  ;;
             02|2)
                  dm-menu
                  ;;
             03|3)
                  netf
                  ;;
             04|4)
                  reres
                  ;;
             05|5)
                  webm
                  ;;
             06|6)
                  clear
                  htop
                  ;;
             07|7)
                  clear
                  speedtest-cli
                  ;;
             x|X)
                 exit
                 ;;
             *)
               menu-set
               ;;
esac
}

menu-set() {
izin
tampilan
}

menu-set
